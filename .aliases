#!/usr/bin/env bash

# Easier navigation: .., ..., ...., .....
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
        colorflag="--color"
else # OS X `ls`
        colorflag="-G"
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"
alias ll=la

# List only directories
alias lsd='ls -lF ${colorflag} | grep "^d"'

# Always use color output for `ls`
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

alias grep="ag"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

usejava() {
  export JAVA_HOME=`/usr/libexec/java_home -v 1.$1`
  echo "new JAVA_HOME: $JAVA_HOME"
}

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# set the terminal title
function termTitle {
  echo -ne "\033]0;"$*"\007"
}

# mvn aliases
function mvninit() {
  if [[ -z "$1" ]]; then
    read -p "Artifact name: " artifact
  else
    artifact=$1
  fi

  echo "Making sure you are running Java 8..."
  usejava 8

  echo "Bootstrapping $artifact using the Maven archetype system..."

  mvn archetype:generate \
    --batch-mode \
    --quiet \
    -DarchetypeGroupId=de.bripkens \
    -DarchetypeArtifactId=java-quickstart \
    -DgroupId=de.bripkens \
    -Dversion=0.1.0-SNAPSHOT \
    -Dpackage="de.bripkens" \
    -DartifactId=$artifact

  echo "  Bootstrap successful!"

  echo "Running initial build..."
  cd $artifact
  mvn --quiet install
  mvn --quiet clean #get rid of target directory

  echo "  Initial build successful!"
  echo "Created files and directories:"
  tree -a .
}

# svn aliases
alias svni='svn propset svn:ignore -F "/.svnignore" -R .'
alias svnc='svn commit -m'
alias svns='svn status'
alias svna='svn add'
alias svnan='svn add -N'
alias svnu='svn update'
alias svnd='svn delete'

# hg aliases
alias hgc='hg commit -m'
alias hgs='hg status'
alias hga='hg add'
alias hgau='hg addremove'

# An easier way to find multiple heads in a branch
alias hgh='hg heads --template "{branch}|{rev}:{node|short}|{date|age}|{author|person}\n" | \
           sort | \
           column -t -s "|"'

hghp() {
  format='{branch}|{rev}:{node|short}|{date|age}|{author|person}\n'
  heads=`hg heads --template $format`
  echo "$heads" | node ~/.dotfiles/scripts/mercurial-heads.js
}

# Copy the name of the current branch to the clipboard
alias hgb="hg branch | \
           tr -d '\n' | \
           pbcopy && \
           hg branch"

# Show all branches in a more readable way
alias hgbs="hg branches | \
            column -t | \
            sort"

# Same as hgbs, but additionally shows closed branches
alias hgbsc="hg branches -c | \
             column -t | \
             sort"

# Copy branch/changeset information to the clipboard.
# Useful when referring to commits
alias hglc="hg log -l 1 | \
            grep -1 changeset | \
            pbcopy"

# See what I have worked on the last few days
hgla() {
  hg log --no-merges \
         --date ${1:-yesterday} \
         --template "{date(date, '%a %d.%m.%Y')} on {branch} \n {desc} \n\n" \
         --user "Ben Ripkens" \
         | less
}

hglac() {
  d=${1:-yesterday}
  hg log --no-merges \
         --date $d \
         --template "{desc}\n" \
         --user "Ben Ripkens" \
         | pbcopy
  echo "Work log for $d copied to clipboard"
}

# Close current branch and switch to development main line
hgclose() {
  branch="$(hg branch)"
  hg commit -m "Closing branch $branch" --close-branch
  hg update develop
  echo "Switched to develop after closing branch $branch"
}

#git aliases
alias gitco='git checkout'
alias gitc='git commit -m'
alias gits='git status'
alias gita='git add'
alias gitau='git add --all . && git add -u :/ && echo "Added all changes" && git status'
alias gitm='git merge'
alias gitd='git diff'
alias gitr='git rm'
alias gitb='git branch'
alias gitbc='git branch --no-color 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/\1/" | tr -d "\n" | pbcopy'
alias gitl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit"
alias gitre='git status --porcelain | q "select c2 from -" | grep xls | xargs git checkout'
alias gitpo='git push origin $(git branch --no-color 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/\1/") --tags'
alias gitpu='git push upstream $(git branch --no-color 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/\1/") --tags'

# SSH aliases
alias ctv='ssh bripkens.de -p 46812'

# Sublime Text
alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"

# ICIS+
alias hsql="$ICISPLUS_REPO/parent/StartAndInitHSQL.bash"
alias icisplus="cd $ICISPLUS_REPO"
alias checkz4="ping 172.19.2.24"
copywidgets() {
    rm -rf $ICISPLUS_REPO/web/src/main/webapp/VAADIN/widgetsets/*
    cp -r $ICISPLUS_REPO/vaadin.widgetset/target/widgetsets/* \
          $ICISPLUS_REPO/web/src/main/webapp/VAADIN/widgetsets/
    rm -rf $ICISPLUS_REPO/web/src/main/webapp/VAADIN/widgetsets/WEB-INF
}

# HuGO
alias hugo="cd $HUGO_REPO"

# Dev tools
alias server="open http://localhost:8000/ && python -m SimpleHTTPServer"
alias canaryunsafe="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary --disable-web-security"

# Show the IP addresses of this machine, with each interface that the address is on.
ips () {
    local interface=""
    local types='vmnet|en|eth|vboxnet'
    local i
    for i in $(
        ifconfig \
        | egrep -o '(^('$types')[0-9]|inet (addr:)?([0-9]+\.){3}[0-9]+)' \
        | egrep -o '(^('$types')[0-9]|([0-9]+\.){3}[0-9]+)' \
        | grep -v 127.0.0.1
    ); do
        if ! [ "$( echo $i | perl -pi -e 's/([0-9]+\.){3}[0-9]+//g' )" == "" ]; then
            interface="$i":
        else
            echo $interface $i
        fi
    done
}

alias pinghome="nmap -sn 192.168.0.1/24"
alias pingwork="nmap -sn 10.10.10.0/24"

macToIp () {
  arp -a | grep "$1" -i | awk '{print($2)}' | sed -E -e 's/\(|\)//g'
}

alias conraspi='ssh `macToIp "B8:27:EB:CD:82:95"` -l pi'

killtomcats() {
    ps ax | \
      grep tomcat | \
      grep -v grep | \
      awk '{ print $1 }' | \
      xargs kill -9
}

# VirtualBox DHCP may change the IP. Use redock to
# update the DOCKER_HOST var
redock() {
  export DOCKER_IP=$(boot2docker ip 2>/dev/null)
  export DOCKER_HOST="tcp://$DOCKER_IP:2375"
}

# Open man page as PDF
pman () { man -t "${1}" | open -f -a "Preview"; }

# Show the location of a linked program
ref() { ls -la $(which "${1}"); }

# Convert an SVG file to a PNG file
svg2png() { qlmanage -t -s 1000 -o . "${1}"; }

write-atom-packages() {
  ls -ad $HOME/.atom/packages/*/ | \
    sed -E 's/^.*\/(.*)\/$/\1/' > \
    $HOME/.dotfiles/atom-packages
  git -C $HOME/.dotfiles status
  echo
  echo "Wrote new package info to ~/.dotfiles. Remember to commit the dotfiles"
}

restore-atom-packages() {
  cat $HOME/.dotfiles/atom-packages | xargs apm install
}

# redo previous command with sudo
alias fuck='sudo $(history -p \!\!)'

# By default I don't want to have all the Android development tools on my path
useandroid() {
  export PATH=${PATH}:/Applications/Android\ Studio.app/sdk/platform-tools:/Applications/Android\ Studio.app/sdk/tools
}
