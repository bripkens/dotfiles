
'*':
  'start a new .bowerrc file':
    'prefix': 'bowerrc'
    'body': '{\n  "directory": "components"\n}'

'.source.json':
  'package json for simple module directories':
    'prefix': 'comp'
    'body': '{\n  "name": "$1",\n  "version": "0.0.0",\n  "private": true,\n  "main": "./$1.js"\n}\n'

'.source.ts':
  'console log':
    'prefix': 'cl'
    'body': 'console.log($1);'

  'function':
    'prefix': 'fn'
    'body': 'function $1($2) {\n  $3\n}'

  'afunction':
    'prefix': 'afn'
    'body': '$1 => $2'

'.source.js':
  'new ES 6 promise':
    'prefix': 'es6p'
    'body': 'new Promise((resolve, reject) => {\n  $1\n});'

  'commonJS import':
    'prefix': 'cre'
    'body': 'const $1 = require(\'$1\');'

  'relative commonJS imports':
    'prefix': 'rel'
    'body': 'const $1 = require(\'./$1\');'

  'ES6 import':
    'prefix': 'imp'
    'body': 'import $1 from \'$1\';'

  'relative ES6 import':
    'prefix': 'relimp'
    'body': 'import $1 from \'./$1\';'

  'stateless React component':
    'prefix': 'fnreactcomp'
    'body': """
    import React from 'react';

    export default function $1() {
      return (
        <>
          Hello from $1!
        </>
      );
    }
    """

  'new React Component':
    'prefix': 'reactcomp'
    'body': """
    var $1 = React.createClass({
      render: function() {
        return (
          <div>
          </div>
        );
      }
    });
    """

  'new React module':
    'prefix': 'reactmod'
    'body': """
    import PureRenderMixin from 'react-addons-pure-render-mixin';
    import irpt from 'react-immutable-proptypes';
    import React from 'react';
    const block = '$1';
    export default React.createClass({
      displayName: '$1',
      mixins: [PureRenderMixin],
      propTypes: {
        // TODO Define props
        // foo: rpt.string.isRequired
      },
      render() {
        return (
          <div className={block}>
          </div>
        );
      }
    });
    """

  'React Test':
    'prefix': 'reacttest'
    'body': """
/*eslint-env mocha*/
import React from 'react/addons';
import proxyquire from 'proxyquire';
import sinon from 'sinon';
import {expect} from 'chai';
import jsdom from 'in-test/jsdom';
const TestUtils = React.addons.TestUtils;
describe('in-components.$1', () => {
  jsdom();
  let $1;
  beforeEach(() => {
    $1 = proxyquire('./$1.es6', {});
  });
  it('should...', () => {
    const node = render({
    });
    throw new Error('TODO implement test');
  });
  function render(props) {
    const comp = TestUtils.renderIntoDocument(
      <$1 {...props} />
    );
    return React.findDOMNode(comp);
  }
});
    """

  'React PropTypes Helper':
    'prefix': 'reactproptypes'
    'body': """
    /*
    // You can declare that a prop is a specific JS primitive. By default, these
    // are all optional.
    optionalArray: React.PropTypes.array,
    optionalBool: React.PropTypes.bool,
    optionalFunc: React.PropTypes.func,
    optionalNumber: React.PropTypes.number,
    optionalObject: React.PropTypes.object,
    optionalString: React.PropTypes.string,
    // Anything that can be rendered: numbers, strings, components or an array
    // containing these types.
    optionalRenderable: React.PropTypes.renderable,
    // A React component.
    optionalComponent: React.PropTypes.component,
    // You can also declare that a prop is an instance of a class. This uses
    // JS's instanceof operator.
    optionalMessage: React.PropTypes.instanceOf(Message),
    // You can ensure that your prop is limited to specific values by treating
    // it as an enum.
    optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),
    // An object that could be one of many types
    optionalUnion: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number,
      React.PropTypes.instanceOf(Message)
    ]),
    // An array of a certain type
    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),
    // An object with property values of a certain type
    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),
    // An object taking on a particular shape
    optionalObjectWithShape: React.PropTypes.shape({
      color: React.PropTypes.string,
      fontSize: React.PropTypes.number
    }),
    // You can chain any of the above with `isRequired` to make sure a warning
    // is shown if the prop isn't provided.
    requiredFunc: React.PropTypes.func.isRequired,
    // A value of any data type
    requiredAny: React.PropTypes.any.isRequired,
    */
    """

  'instana events':
    'prefix': 'inevent'
    'body': """Immutable.fromJS({
      'id': '$1',
      'start': 10,
      'end': 20,
      'state': 'closed'
    })"""

'.text.html':
  'Google IO slide':
    'prefix': 'ioslide'
    'body': """
      <slide>
        <hgroup>
          <h2>$1</h2>
        </hgroup>
        <article>
          $2
        </article>
      </slide>
    """

'.source.editorconfig':
  'sample editorconfig file':
    'prefix': 'editorconfig'
    'body': """
      root = true
      [*]
      end_of_line = lf
      insert_final_newline = true
      indent_style = space
      indent_size = 2
      trim_trailing_whitespace = true
      charset = utf-8
   """
